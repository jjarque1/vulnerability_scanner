import socket
import threading
from queue import Queue
from scanner.service_version import identify_service
from utils.network_utils import check_local_open_ports
import json
import os
import requests

# Queue to hold ports to be scanned
port_queue = Queue()


# Function to scan a single port
def scan_port(target, port):
    """Check if a specific port is open on the target IP."""
    try:
        # Create a socket object with IPv4 and TCP
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Set a timeout for the socket connection
        sock.settimeout(1)
        # Try connecting to the target IP and port
        result = sock.connect_ex((target, port))

        # If the result is 0, the port is open
        if result == 0:
            print(f"Port {port} is open")
            identify_service(sock, target, port)
            save_scan_result(target, port, "open")
        sock.close()
    except Exception as e:
        print(f"Error scanning port {port}: {e}")
        save_scan_result(target, port, "error")


# Worker function to get ports from the queue and scan them
def worker(target):
    while not port_queue.empty():
        port = port_queue.get()
        scan_port(target, port)
        port_queue.task_done()


# Function to scan ports with multi-threading
def scan_ports(target, start_port, end_port, num_threads=10):
    """Scan a range of ports on the target IP using multi-threading."""
    print(f"Scanning {target} for open ports from {start_port} to {end_port} using {num_threads} threads...")

    # Fill the queue with ports to be scanned
    for port in range(start_port, end_port + 1):
        port_queue.put(port)

    # Create and start threads
    threads = []
    for _ in range(num_threads):
        thread = threading.Thread(target=worker, args=(target,))
        threads.append(thread)
        thread.start()

    # Wait for all threads to finish
    for thread in threads:
        thread.join()


# Function to save scan results to a JSON file
def save_scan_result(target, port, status):
    """Save the result of the scan to a JSON file."""
    result = {
        "target": target,
        "port": port,
        "status": status
    }

    # Create results directory if it doesn't exist
    if not os.path.exists("results"):
        os.makedirs("results")

    # Save result to a JSON file
    with open(f"results/{target}_scan_results.json", "a") as f:
        json.dump(result, f)
        f.write("\n")


# Function to perform an HTTP scan with authentication
def scan_http(target, port, username=None, password=None):
    """Scan an HTTP(S) service on a specific port, optionally using basic authentication."""
    url = f"http://{target}:{port}"
    headers = {}
    auth = None

    if username and password:
        auth = (username, password)
        print(f"Scanning {url} with authentication...")
    else:
        print(f"Scanning {url} without authentication...")

    try:
        response = requests.get(url, headers=headers, auth=auth, timeout=5)
        print(f"HTTP {response.status_code} - {response.reason}")
        save_scan_result(target, port, f"HTTP {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error scanning HTTP service on port {port}: {e}")
        save_scan_result(target, port, "error")


# Function to generate an HTML report of the scan results
def generate_html_report(target):
    """Generate an HTML report of the scan results."""
    results_file = f"results/{target}_scan_results.json"
    if not os.path.exists(results_file):
        print(f"No results found for {target}.")
        return

    report_file = f"results/{target}_scan_report.html"
    with open(results_file, "r") as f:
        lines = f.readlines()

    html_content = """
    <html>
    <head>
        <title>Scan Report for {target}</title>
        <style>
            body { font-family: Arial, sans-serif; }
            table { width: 100%; border-collapse: collapse; }
            table, th, td { border: 1px solid black; }
            th, td { padding: 10px; text-align: left; }
            th { background-color: #f2f2f2; }
        </style>
    </head>
    <body>
        <h1>Scan Report for {target}</h1>
        <table>
            <tr>
                <th>Port</th>
                <th>Status</th>
            </tr>
    """

    for line in lines:
        result = json.loads(line)
        port = result["port"]
        status = result["status"]
        html_content += f"<tr><td>{port}</td><td>{status}</td></tr>"

    html_content += """
        </table>
    </body>
    </html>
    """

    with open(report_file, "w") as f:
        f.write(html_content)

    print(f"HTML report generated: {report_file}")


# Example usage
if __name__ == "__main__":
    target_ip = input("Enter the IP address to scan: ")
    scan_option = input("Do you want to scan local open ports first? (yes/no): ")
    if scan_option.lower() == "yes":
        check_local_open_ports(target_ip)

    http_option = input("Do you want to scan HTTP(S) services with optional authentication? (yes/no): ")
    if http_option.lower() == "yes":
        http_port = int(input("Enter the port for HTTP scan (default 80): ") or 80)
        use_auth = input("Use authentication? (yes/no): ")
        if use_auth.lower() == "yes":
            username = input("Enter username: ")
            password = input("Enter password: ")
            scan_http(target_ip, http_port, username, password)
        else:
            scan_http(target_ip, http_port)

    scan_ports(target_ip, 1, 1024)
    generate_html_report(target_ip)