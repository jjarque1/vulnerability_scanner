import socket
import requests

def scan_port(target, port):
    """Check if a specific port is open on the target IP and attempt to identify the service version."""
    try:
        # Create a socket object with IPv4 and TCP
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Set a timeout for the socket connection
        sock.settimeout(1)
        # Try connecting to the target IP and port
        result = sock.connect_ex((target, port))

        # If the result is 0, the port is open
        if result == 0:
            print(f"Port {port} is open")
            try:
                # Attempt to grab the banner (service version)
                sock.send(b'\r\n')
                banner = sock.recv(1024).decode().strip()
                if banner:
                    print(f"Service on port {port}: {banner}")
                    check_cve(banner)
            except socket.timeout:
                print(f"No banner received on port {port}")
        sock.close()
    except Exception as e:
        print(f"Error scanning port {port}: {e}")


def check_cve(service_banner):
    """Check if the service version has known vulnerabilities using CVE data."""
    print(f"Checking CVE database for {service_banner}...")
    try:
        response = requests.get(f"https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={service_banner}")
        if response.status_code == 200:
            data = response.json()
            if data.get("result") and data["result"].get("CVE_Items"):
                for item in data["result"]["CVE_Items"]:
                    cve_id = item["cve"]["CVE_data_meta"]["ID"]
                    description = item["cve"]["description"]["description_data"][0]["value"]
                    print(f"- {cve_id}: {description}")
            else:
                print("No known vulnerabilities found.")
        else:
            print(f"Failed to fetch CVE data: {response.status_code}")
    except Exception as e:
        print(f"Error checking CVE database: {e}")


def scan_ports(target, start_port, end_port):
    """Scan a range of ports on the target IP."""
    print(f"Scanning {target} for open ports from {start_port} to {end_port}...")
    for port in range(start_port, end_port + 1):
        scan_port(target, port)


# Example usage
if __name__ == "__main__":
    target_ip = input("Enter the IP address to scan: ")
    scan_ports(target_ip, 1, 1024)